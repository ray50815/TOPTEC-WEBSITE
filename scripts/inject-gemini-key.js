#!/usr/bin/env node
/**
 * Generates a browser bundle that exposes the Gemini API key.
 * The key is read from process.env.GEMINI_KEY during build time.
 *
 * Usage:
 *   GEMINI_KEY="your-key" node scripts/inject-gemini-key.js
 */

const fs = require('fs');
const path = require('path');

const envKey = process.env.GEMINI_KEY ? String(process.env.GEMINI_KEY).trim() : '';

if (!envKey) {
  console.error('[inject-gemini-key] Missing GEMINI_KEY environment variable.');
  process.exit(1);
}

if (envKey.includes('\n')) {
  console.error('[inject-gemini-key] GEMINI_KEY contains newline characters. Please provide a single-line key.');
  process.exit(1);
}

const outputPath = path.resolve(__dirname, '../assets/internal/gemini-key.js');
const banner = '// Auto-generated by scripts/inject-gemini-key.js';
const payload = `(() => {
  const injectedKey = ${JSON.stringify(envKey)};
  if (!injectedKey) return;

  if (typeof window !== 'undefined') {
    window.TOPTEC_GEMINI_KEY = injectedKey;
    try {
      const storageKey = 'toptec-translation-api-key';
      const existing = window.localStorage?.getItem(storageKey);
      if (!existing) {
        window.localStorage.setItem(storageKey, injectedKey);
      }
    } catch (error) {
      console.warn('[gemini-key] Unable to persist key to localStorage:', error?.message || error);
    }
  }
})();\n`;

const fileContents = `${banner}\n${payload}`;

fs.mkdirSync(path.dirname(outputPath), { recursive: true });
fs.writeFileSync(outputPath, fileContents, 'utf8');

console.log(`[inject-gemini-key] Wrote default key to ${path.relative(process.cwd(), outputPath)}`);
